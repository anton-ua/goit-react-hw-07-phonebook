{"version":3,"sources":["Components/App/App.module.css","Components/AddContact/AddContact.module.css","Transition/TransitionLogo.module.css","Transition/TransitionListItem.module.css","Components/ContactsItem/ContactsItem.module.css","Transition/TransitionFilter.module.css","Components/AddContact/AddContact.js","redux/actionsTypes.js","redux/contactsActions.js","redux/selector.js","Components/AddContact/AddContactConnect.js","redux/contactsOperations.js","Components/ContactsItem/ContactsItem.js","Components/ContactsItem/ContactsItemConnect.js","Components/ContactsList/ContactsList.js","Components/ContactsList/ContactsListConnect.js","Components/Filter/Filter.js","Components/Filter/FilterConnect.js","Components/App/App.js","redux/contactsReducer.js","redux/store.js","index.js"],"names":["module","exports","InitialState","name","number","AddContact","state","contactToAdd","isLogo","handleChange","target","value","setState","handleSubmit","e","preventDefault","props","contacts","some","contact","toLowerCase","alert","postContact","reset","this","CSSTransition","in","classNames","TransitionLogo","timeout","unmountOnExit","onSubmit","type","placeholder","onChange","className","styles","buttonAdd","Component","Type","filterContact","createAction","getContactsStart","getContactsSucess","getContactsError","postContactStart","postContactSuccess","postContactError","deleteContactStart","deleteContactSuccess","deleteContactError","getContacts","getFilter","filter","connect","dispatch","Axios","post","then","data","catch","error","ContactsItem","id","deleteContact","onClick","button","delete","ContactsList","filteredContacts","includes","filterContacts","TransitionGroup","component","map","key","TransitionListItem","ContactsItemConnect","Filter","handleFilter","TransitionFilter","length","contactsActions","App","fetchContacts","container","AddContactConnect","FilterConnect","ContactsListConnect","mapDispatchToProps","get","contactsReducer","createReducer","payload","filterReducer","combineReducers","middlewares","applyMiddleware","thunk","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.23edc1f4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3twmq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonAdd\":\"AddContact_buttonAdd__2G28W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"TransitionLogo_enter__1tqM8\",\"enterActive\":\"TransitionLogo_enterActive__3n2nV\",\"exit\":\"TransitionLogo_exit__LTW0B\",\"exitActive\":\"TransitionLogo_exitActive__1nRB_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"TransitionListItem_enter__2QprP\",\"enterActive\":\"TransitionListItem_enterActive__3Su1q\",\"exit\":\"TransitionListItem_exit__2Dca_\",\"exitActive\":\"TransitionListItem_exitActive__2Ai0I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactsItem_button__2N-o9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"TransitionFilter_enter__2_ISb\",\"enterActive\":\"TransitionFilter_enterActive__2pAPJ\",\"exit\":\"TransitionFilter_exit__t3lk9\",\"exitActive\":\"TransitionFilter_exitActive__1NwB_\"};","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./AddContact.module.css\";\nimport { CSSTransition } from \"react-transition-group\";\nimport TransitionLogo from \"../../Transition/TransitionLogo.module.css\";\n\nconst InitialState = { name: \"\", number: \"\" };\n\nexport default class AddContact extends Component {\n  state = { contactToAdd: { ...InitialState }, isLogo: false };\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n\n    this.setState(({ contactToAdd }) => ({\n      contactToAdd: { ...contactToAdd, [name]: value },\n    }));\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { name, number } = this.state.contactToAdd;\n\n    if (!name) {\n      return;\n    }\n\n    if (!number) {\n      return;\n    }\n\n    if (\n      this.props.contacts.some(\n        (contact) => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contact`);\n      return;\n    }\n\n    this.props.postContact({ ...this.state.contactToAdd });\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ contactToAdd: { ...InitialState } });\n  };\n\n  componentDidMount() {\n    this.setState({ isLogo: true });\n  }\n\n  render() {\n    return (\n      <>\n        <CSSTransition\n          in={this.state.isLogo}\n          classNames={TransitionLogo}\n          timeout={500}\n          unmountOnExit\n        >\n          <h2>Phonebook</h2>\n        </CSSTransition>\n        <form onSubmit={this.handleSubmit}>\n          <label name=\"name\">\n            Name\n            <input\n              type=\"text\"\n              placeholder=\"Enter name\"\n              name=\"name\"\n              value={this.state.contactToAdd.name}\n              onChange={this.handleChange}\n            />\n          </label>\n          <label name=\"number\">\n            Number\n            <input\n              type=\"text\"\n              placeholder=\"Enter phone number\"\n              name=\"number\"\n              value={this.state.contactToAdd.number}\n              onChange={this.handleChange}\n            />\n          </label>\n          <button className={styles.buttonAdd} type=\"submit\">\n            Add Contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nAddContact.propTypes = {\n  postContact: PropTypes.func.isRequired,\n  contacts: PropTypes.array.isRequired,\n};\n","export const Type = {\n  FILTER_CONTACT: \"FILTER_CONTACT\",\n  GET_CONTACTS_START: \"GET_CONTACTS_START\",\n  GET_CONTACTS_SUCCESS: \"GET_CONTACTS_SUCCES\",\n  GET_CONTACTS_ERROR: \"GET_CONTACTS_ERROR\",\n  POST_CONTACT_START: \"POST_CONTACT_START\",\n  POST_CONTACT_SUCCESS: \"POST_CONTACT_SUCCESS\",\n  POST_CONTACT_ERROR: \"POST_CONTACT_ERROR\",\n  DELETE_CONTACT_START: \"DELETE_CONTACT_START\",\n  DELETE_CONTACT_SUCESS: \"DELETE_CONTACT_SUCESS\",\n  DELETE_CONTACT_ERROR: \"DELETE_CONTACT_ERROR\",\n};\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { Type } from \"./actionsTypes\";\n\nexport const filterContact = createAction(Type.FILTER_CONTACT);\n\nexport const getContactsStart = createAction(Type.GET_CONTACTS_START);\n\nexport const getContactsSucess = createAction(Type.GET_CONTACTS_SUCCESS);\n\nexport const getContactsError = createAction(Type.GET_CONTACTS_ERROR);\n\nexport const postContactStart = createAction(Type.POST_CONTACT_START);\n\nexport const postContactSuccess = createAction(Type.POST_CONTACT_SUCCESS);\n\nexport const postContactError = createAction(Type.POST_CONTACT_ERROR);\n\nexport const deleteContactStart = createAction(Type.DELETE_CONTACT_START);\n\nexport const deleteContactSuccess = createAction(Type.DELETE_CONTACT_SUCESS);\n\nexport const deleteContactError = createAction(Type.DELETE_CONTACT_ERROR);\n","export const getContacts = (state) => state.contacts;\nexport const getFilter = (state) => state.filter;\n","import { connect } from \"react-redux\";\nimport AddContact from \"./AddContact\";\nimport { postContact } from \"../../redux/contactsOperations\";\nimport { getContacts } from \"../../redux/selector\";\n\nconst mapStateToProps = (state) => ({\n  contacts: getContacts(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  postContact: (contact) => dispatch(postContact(contact)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddContact);\n","import Axios from \"axios\";\nimport {\n  getContactsStart,\n  getContactsSucess,\n  getContactsError,\n  postContactStart,\n  postContactSuccess,\n  postContactError,\n  deleteContactStart,\n  deleteContactSuccess,\n  deleteContactError,\n} from \"./contactsActions\";\n\nexport const fetchContacts = () => (dispatch) => {\n  dispatch(getContactsStart());\n\n  Axios.get(\"http://localhost:8686/contacts\")\n    .then(({ data }) => dispatch(getContactsSucess(data)))\n    .catch((error) => dispatch(getContactsError(error)));\n};\n\nexport const postContact = (contact) => (dispatch) => {\n  dispatch(postContactStart());\n\n  Axios.post(\"http://localhost:8686/contacts\", contact)\n    .then(({ data }) => dispatch(postContactSuccess(data)))\n    .catch((error) => dispatch(postContactError(error)));\n};\n\nexport const deleteContact = (id) => (dispatch) => {\n  dispatch(deleteContactStart());\n\n  Axios.delete(`http://localhost:8686/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch((error) => dispatch(deleteContactError(error)));\n};\n","import React from \"react\";\nimport styles from \"./ContactsItem.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst ContactsItem = ({ name, number, id, deleteContact }) => {\n  const del = () => deleteContact(id);\n\n  return (\n    <li>\n      <p>\n        {name}: <span>{number}</span>\n        <button type=\"button\" onClick={del} className={styles.button}>\n          X\n        </button>\n      </p>\n    </li>\n  );\n};\nContactsItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactsItem;\n","import ContactsItem from \"./ContactsItem\";\nimport { connect } from \"react-redux\";\nimport { deleteContact } from \"../../redux/contactsOperations\";\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteContact: (id) => dispatch(deleteContact(id)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactsItem);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport TransitionListItem from \"../../Transition/TransitionListItem.module.css\";\nimport ContactsItemConnect from \"../ContactsItem/ContactsItemConnect\";\n\nconst filterContacts = (contacts, filter) => {\n  return contacts.filter((contact) =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n};\n\nconst ContactsList = ({ contacts, filter }) => {\n  const filteredContacts = filter ? filterContacts(contacts, filter) : contacts;\n\n  return (\n    <TransitionGroup component=\"ul\">\n      {filteredContacts.map(({ name, number, id }) => (\n        <CSSTransition\n          timeout={250}\n          unmountOnExit\n          key={id}\n          classNames={TransitionListItem}\n        >\n          <ContactsItemConnect name={name} number={number} id={id} />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n\nexport default ContactsList;\n\nContactsList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n","import { connect } from \"react-redux\";\nimport ContactsList from \"./ContactsList\";\nimport { getContacts, getFilter } from \"../../redux/selector\";\n\nconst mapStateToProps = (state) => ({\n  contacts: getContacts(state),\n  filter: getFilter(state),\n});\n\nexport default connect(mapStateToProps)(ContactsList);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransition } from \"react-transition-group\";\nimport TransitionFilter from \"../../Transition/TransitionFilter.module.css\";\n\nconst Filter = ({ contacts, filter, handleFilter }) => (\n  <CSSTransition\n    classNames={TransitionFilter}\n    timeout={250}\n    unmountOnExit\n    in={contacts.length > 1}\n  >\n    <div>\n      <p>Find contact by name:</p>\n      <input\n        placeholder=\"Find...\"\n        value={filter}\n        onChange={(e) => handleFilter(e.target.value)}\n      />\n    </div>\n  </CSSTransition>\n);\n\nexport default Filter;\n\nFilter.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  filter: PropTypes.string.isRequired,\n  handleFilter: PropTypes.func.isRequired,\n};\n","import Filter from \"./Filter\";\nimport { connect } from \"react-redux\";\nimport * as contactsActions from \"../../redux/contactsActions\";\nimport { getContacts, getFilter } from \"../../redux/selector\";\n\nconst mapStateToProps = (state) => ({\n  contacts: getContacts(state),\n  filter: getFilter(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleFilter: (filter) => dispatch(contactsActions.filterContact(filter)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from \"react\";\nimport styles from \"./App.module.css\";\nimport AddContactConnect from \"../AddContact/AddContactConnect\";\nimport ContactsListConnect from \"../ContactsList/ContactsListConnect\";\nimport FilterConnect from \"../Filter/FilterConnect\";\nimport { connect } from \"react-redux\";\nimport { fetchContacts } from \"../../redux/contactsOperations\";\nimport PropTypes from \"prop-types\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <div className={styles.container}>\n        <AddContactConnect />\n        <FilterConnect />\n        <ContactsListConnect />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  fetchContacts: fetchContacts,\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n\nApp.propTypes = {\n  fetchContacts: PropTypes.func.isRequired,\n};\n","import { Type } from \"./actionsTypes\";\nimport { createReducer, combineReducers } from \"@reduxjs/toolkit\";\n\nconst contactsReducer = createReducer([], {\n  [Type.GET_CONTACTS_SUCCESS]: (state, { payload }) => payload,\n  [Type.POST_CONTACT_SUCCESS]: (state, { payload }) => [...state, payload],\n  [Type.DELETE_CONTACT_SUCESS]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filterReducer = createReducer(\"\", {\n  [Type.FILTER_CONTACT]: (state, { payload }) => payload,\n});\n\nexport default combineReducers({\n  contacts: contactsReducer,\n  filter: filterReducer,\n});\n","import { createStore, applyMiddleware } from \"@reduxjs/toolkit\";\nimport contactsReducer from \"./contactsReducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\nconst middlewares = applyMiddleware(thunk);\n\nconst store = createStore(contactsReducer, composeWithDevTools(middlewares));\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App/App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}